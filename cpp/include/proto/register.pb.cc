// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: register.proto

#include "register.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace agent {
namespace DTO {
PROTOBUF_CONSTEXPR AuthenticationData::AuthenticationData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.tenant_id_)*/nullptr
  , /*decltype(_impl_.auth_type_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AuthenticationDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AuthenticationDataDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AuthenticationDataDefaultTypeInternal() {}
  union {
    AuthenticationData _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AuthenticationDataDefaultTypeInternal _AuthenticationData_default_instance_;
PROTOBUF_CONSTEXPR SystemInformation::SystemInformation(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.kubernetes_version_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SystemInformationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SystemInformationDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SystemInformationDefaultTypeInternal() {}
  union {
    SystemInformation _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SystemInformationDefaultTypeInternal _SystemInformation_default_instance_;
PROTOBUF_CONSTEXPR RegisterInfo::RegisterInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.register_request_id_)*/nullptr
  , /*decltype(_impl_.agent_id_)*/nullptr
  , /*decltype(_impl_.agent_version_)*/nullptr
  , /*decltype(_impl_.system_info_)*/nullptr
  , /*decltype(_impl_.auth_data_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RegisterInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RegisterInfoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RegisterInfoDefaultTypeInternal() {}
  union {
    RegisterInfo _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RegisterInfoDefaultTypeInternal _RegisterInfo_default_instance_;
PROTOBUF_CONSTEXPR RegisterResult::RegisterResult(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.error_)*/nullptr
  , /*decltype(_impl_.status_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RegisterResultDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RegisterResultDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RegisterResultDefaultTypeInternal() {}
  union {
    RegisterResult _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RegisterResultDefaultTypeInternal _RegisterResult_default_instance_;
}  // namespace DTO
}  // namespace agent
static ::_pb::Metadata file_level_metadata_register_2eproto[4];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_register_2eproto[1];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_register_2eproto = nullptr;
const ::uint32_t TableStruct_register_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::agent::DTO::AuthenticationData, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::agent::DTO::AuthenticationData, _impl_.auth_type_),
    PROTOBUF_FIELD_OFFSET(::agent::DTO::AuthenticationData, _impl_.tenant_id_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::agent::DTO::SystemInformation, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::agent::DTO::SystemInformation, _impl_.kubernetes_version_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::agent::DTO::RegisterInfo, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::agent::DTO::RegisterInfo, _impl_.register_request_id_),
    PROTOBUF_FIELD_OFFSET(::agent::DTO::RegisterInfo, _impl_.agent_id_),
    PROTOBUF_FIELD_OFFSET(::agent::DTO::RegisterInfo, _impl_.agent_version_),
    PROTOBUF_FIELD_OFFSET(::agent::DTO::RegisterInfo, _impl_.system_info_),
    PROTOBUF_FIELD_OFFSET(::agent::DTO::RegisterInfo, _impl_.auth_data_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::agent::DTO::RegisterResult, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::agent::DTO::RegisterResult, _impl_.status_),
    PROTOBUF_FIELD_OFFSET(::agent::DTO::RegisterResult, _impl_.error_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, -1, -1, sizeof(::agent::DTO::AuthenticationData)},
        { 10, -1, -1, sizeof(::agent::DTO::SystemInformation)},
        { 19, -1, -1, sizeof(::agent::DTO::RegisterInfo)},
        { 32, -1, -1, sizeof(::agent::DTO::RegisterResult)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::agent::DTO::_AuthenticationData_default_instance_._instance,
    &::agent::DTO::_SystemInformation_default_instance_._instance,
    &::agent::DTO::_RegisterInfo_default_instance_._instance,
    &::agent::DTO::_RegisterResult_default_instance_._instance,
};
const char descriptor_table_protodef_register_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\016register.proto\022\tagent.DTO\032\014common.prot"
    "o\"g\n\022AuthenticationData\0220\n\tauth_type\030\001 \001"
    "(\0162\035.agent.DTO.AuthenticationType\022\037\n\tten"
    "ant_id\030\002 \001(\0132\014.common.UUID\"/\n\021SystemInfo"
    "rmation\022\032\n\022kubernetes_version\030\001 \001(\t\"\353\001\n\014"
    "RegisterInfo\022)\n\023register_request_id\030\001 \001("
    "\0132\014.common.UUID\022\036\n\010agent_id\030\002 \001(\0132\014.comm"
    "on.UUID\022+\n\ragent_version\030\003 \001(\0132\024.common."
    "AgentVersion\0221\n\013system_info\030\004 \001(\0132\034.agen"
    "t.DTO.SystemInformation\0220\n\tauth_data\030\005 \001"
    "(\0132\035.agent.DTO.AuthenticationData\"N\n\016Reg"
    "isterResult\022\036\n\006status\030\001 \001(\0162\016.common.Sta"
    "tus\022\034\n\005error\030\002 \001(\0132\r.common.Error*2\n\022Aut"
    "henticationType\022\013\n\007Unknown\020\000\022\017\n\013Certific"
    "ate\020\001b\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_register_2eproto_deps[1] =
    {
        &::descriptor_table_common_2eproto,
};
static ::absl::once_flag descriptor_table_register_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_register_2eproto = {
    false,
    false,
    573,
    descriptor_table_protodef_register_2eproto,
    "register.proto",
    &descriptor_table_register_2eproto_once,
    descriptor_table_register_2eproto_deps,
    1,
    4,
    schemas,
    file_default_instances,
    TableStruct_register_2eproto::offsets,
    file_level_metadata_register_2eproto,
    file_level_enum_descriptors_register_2eproto,
    file_level_service_descriptors_register_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_register_2eproto_getter() {
  return &descriptor_table_register_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_register_2eproto(&descriptor_table_register_2eproto);
namespace agent {
namespace DTO {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AuthenticationType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_register_2eproto);
  return file_level_enum_descriptors_register_2eproto[0];
}
bool AuthenticationType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}
// ===================================================================

class AuthenticationData::_Internal {
 public:
  static const ::common::UUID& tenant_id(const AuthenticationData* msg);
};

const ::common::UUID&
AuthenticationData::_Internal::tenant_id(const AuthenticationData* msg) {
  return *msg->_impl_.tenant_id_;
}
void AuthenticationData::clear_tenant_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.tenant_id_ != nullptr) {
    delete _impl_.tenant_id_;
  }
  _impl_.tenant_id_ = nullptr;
}
AuthenticationData::AuthenticationData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:agent.DTO.AuthenticationData)
}
AuthenticationData::AuthenticationData(const AuthenticationData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AuthenticationData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.tenant_id_){nullptr}
    , decltype(_impl_.auth_type_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_tenant_id()) {
    _this->_impl_.tenant_id_ = new ::common::UUID(*from._impl_.tenant_id_);
  }
  _this->_impl_.auth_type_ = from._impl_.auth_type_;
  // @@protoc_insertion_point(copy_constructor:agent.DTO.AuthenticationData)
}

inline void AuthenticationData::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.tenant_id_){nullptr}
    , decltype(_impl_.auth_type_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

AuthenticationData::~AuthenticationData() {
  // @@protoc_insertion_point(destructor:agent.DTO.AuthenticationData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AuthenticationData::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.tenant_id_;
}

void AuthenticationData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AuthenticationData::Clear() {
// @@protoc_insertion_point(message_clear_start:agent.DTO.AuthenticationData)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.tenant_id_ != nullptr) {
    delete _impl_.tenant_id_;
  }
  _impl_.tenant_id_ = nullptr;
  _impl_.auth_type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AuthenticationData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .agent.DTO.AuthenticationType auth_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          ::uint32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_auth_type(static_cast<::agent::DTO::AuthenticationType>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // .common.UUID tenant_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_tenant_id(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* AuthenticationData::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:agent.DTO.AuthenticationData)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .agent.DTO.AuthenticationType auth_type = 1;
  if (this->_internal_auth_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_auth_type(), target);
  }

  // .common.UUID tenant_id = 2;
  if (this->_internal_has_tenant_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::tenant_id(this),
        _Internal::tenant_id(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:agent.DTO.AuthenticationData)
  return target;
}

::size_t AuthenticationData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:agent.DTO.AuthenticationData)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .common.UUID tenant_id = 2;
  if (this->_internal_has_tenant_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.tenant_id_);
  }

  // .agent.DTO.AuthenticationType auth_type = 1;
  if (this->_internal_auth_type() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_auth_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AuthenticationData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AuthenticationData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AuthenticationData::GetClassData() const { return &_class_data_; }


void AuthenticationData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AuthenticationData*>(&to_msg);
  auto& from = static_cast<const AuthenticationData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:agent.DTO.AuthenticationData)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_tenant_id()) {
    _this->_internal_mutable_tenant_id()->::common::UUID::MergeFrom(
        from._internal_tenant_id());
  }
  if (from._internal_auth_type() != 0) {
    _this->_internal_set_auth_type(from._internal_auth_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AuthenticationData::CopyFrom(const AuthenticationData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:agent.DTO.AuthenticationData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthenticationData::IsInitialized() const {
  return true;
}

void AuthenticationData::InternalSwap(AuthenticationData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AuthenticationData, _impl_.auth_type_)
      + sizeof(AuthenticationData::_impl_.auth_type_)
      - PROTOBUF_FIELD_OFFSET(AuthenticationData, _impl_.tenant_id_)>(
          reinterpret_cast<char*>(&_impl_.tenant_id_),
          reinterpret_cast<char*>(&other->_impl_.tenant_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AuthenticationData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_register_2eproto_getter, &descriptor_table_register_2eproto_once,
      file_level_metadata_register_2eproto[0]);
}
// ===================================================================

class SystemInformation::_Internal {
 public:
};

SystemInformation::SystemInformation(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:agent.DTO.SystemInformation)
}
SystemInformation::SystemInformation(const SystemInformation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SystemInformation* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.kubernetes_version_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.kubernetes_version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.kubernetes_version_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_kubernetes_version().empty()) {
    _this->_impl_.kubernetes_version_.Set(from._internal_kubernetes_version(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:agent.DTO.SystemInformation)
}

inline void SystemInformation::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.kubernetes_version_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.kubernetes_version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.kubernetes_version_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SystemInformation::~SystemInformation() {
  // @@protoc_insertion_point(destructor:agent.DTO.SystemInformation)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SystemInformation::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.kubernetes_version_.Destroy();
}

void SystemInformation::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SystemInformation::Clear() {
// @@protoc_insertion_point(message_clear_start:agent.DTO.SystemInformation)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.kubernetes_version_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SystemInformation::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string kubernetes_version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_kubernetes_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "agent.DTO.SystemInformation.kubernetes_version"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* SystemInformation::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:agent.DTO.SystemInformation)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string kubernetes_version = 1;
  if (!this->_internal_kubernetes_version().empty()) {
    const std::string& _s = this->_internal_kubernetes_version();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "agent.DTO.SystemInformation.kubernetes_version");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:agent.DTO.SystemInformation)
  return target;
}

::size_t SystemInformation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:agent.DTO.SystemInformation)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string kubernetes_version = 1;
  if (!this->_internal_kubernetes_version().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_kubernetes_version());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SystemInformation::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SystemInformation::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SystemInformation::GetClassData() const { return &_class_data_; }


void SystemInformation::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SystemInformation*>(&to_msg);
  auto& from = static_cast<const SystemInformation&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:agent.DTO.SystemInformation)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_kubernetes_version().empty()) {
    _this->_internal_set_kubernetes_version(from._internal_kubernetes_version());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SystemInformation::CopyFrom(const SystemInformation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:agent.DTO.SystemInformation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SystemInformation::IsInitialized() const {
  return true;
}

void SystemInformation::InternalSwap(SystemInformation* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.kubernetes_version_, lhs_arena,
                                       &other->_impl_.kubernetes_version_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata SystemInformation::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_register_2eproto_getter, &descriptor_table_register_2eproto_once,
      file_level_metadata_register_2eproto[1]);
}
// ===================================================================

class RegisterInfo::_Internal {
 public:
  static const ::common::UUID& register_request_id(const RegisterInfo* msg);
  static const ::common::UUID& agent_id(const RegisterInfo* msg);
  static const ::common::AgentVersion& agent_version(const RegisterInfo* msg);
  static const ::agent::DTO::SystemInformation& system_info(const RegisterInfo* msg);
  static const ::agent::DTO::AuthenticationData& auth_data(const RegisterInfo* msg);
};

const ::common::UUID&
RegisterInfo::_Internal::register_request_id(const RegisterInfo* msg) {
  return *msg->_impl_.register_request_id_;
}
const ::common::UUID&
RegisterInfo::_Internal::agent_id(const RegisterInfo* msg) {
  return *msg->_impl_.agent_id_;
}
const ::common::AgentVersion&
RegisterInfo::_Internal::agent_version(const RegisterInfo* msg) {
  return *msg->_impl_.agent_version_;
}
const ::agent::DTO::SystemInformation&
RegisterInfo::_Internal::system_info(const RegisterInfo* msg) {
  return *msg->_impl_.system_info_;
}
const ::agent::DTO::AuthenticationData&
RegisterInfo::_Internal::auth_data(const RegisterInfo* msg) {
  return *msg->_impl_.auth_data_;
}
void RegisterInfo::clear_register_request_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.register_request_id_ != nullptr) {
    delete _impl_.register_request_id_;
  }
  _impl_.register_request_id_ = nullptr;
}
void RegisterInfo::clear_agent_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.agent_id_ != nullptr) {
    delete _impl_.agent_id_;
  }
  _impl_.agent_id_ = nullptr;
}
void RegisterInfo::clear_agent_version() {
  if (GetArenaForAllocation() == nullptr && _impl_.agent_version_ != nullptr) {
    delete _impl_.agent_version_;
  }
  _impl_.agent_version_ = nullptr;
}
RegisterInfo::RegisterInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:agent.DTO.RegisterInfo)
}
RegisterInfo::RegisterInfo(const RegisterInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RegisterInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.register_request_id_){nullptr}
    , decltype(_impl_.agent_id_){nullptr}
    , decltype(_impl_.agent_version_){nullptr}
    , decltype(_impl_.system_info_){nullptr}
    , decltype(_impl_.auth_data_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_register_request_id()) {
    _this->_impl_.register_request_id_ = new ::common::UUID(*from._impl_.register_request_id_);
  }
  if (from._internal_has_agent_id()) {
    _this->_impl_.agent_id_ = new ::common::UUID(*from._impl_.agent_id_);
  }
  if (from._internal_has_agent_version()) {
    _this->_impl_.agent_version_ = new ::common::AgentVersion(*from._impl_.agent_version_);
  }
  if (from._internal_has_system_info()) {
    _this->_impl_.system_info_ = new ::agent::DTO::SystemInformation(*from._impl_.system_info_);
  }
  if (from._internal_has_auth_data()) {
    _this->_impl_.auth_data_ = new ::agent::DTO::AuthenticationData(*from._impl_.auth_data_);
  }
  // @@protoc_insertion_point(copy_constructor:agent.DTO.RegisterInfo)
}

inline void RegisterInfo::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.register_request_id_){nullptr}
    , decltype(_impl_.agent_id_){nullptr}
    , decltype(_impl_.agent_version_){nullptr}
    , decltype(_impl_.system_info_){nullptr}
    , decltype(_impl_.auth_data_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RegisterInfo::~RegisterInfo() {
  // @@protoc_insertion_point(destructor:agent.DTO.RegisterInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RegisterInfo::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.register_request_id_;
  if (this != internal_default_instance()) delete _impl_.agent_id_;
  if (this != internal_default_instance()) delete _impl_.agent_version_;
  if (this != internal_default_instance()) delete _impl_.system_info_;
  if (this != internal_default_instance()) delete _impl_.auth_data_;
}

void RegisterInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RegisterInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:agent.DTO.RegisterInfo)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.register_request_id_ != nullptr) {
    delete _impl_.register_request_id_;
  }
  _impl_.register_request_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.agent_id_ != nullptr) {
    delete _impl_.agent_id_;
  }
  _impl_.agent_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.agent_version_ != nullptr) {
    delete _impl_.agent_version_;
  }
  _impl_.agent_version_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.system_info_ != nullptr) {
    delete _impl_.system_info_;
  }
  _impl_.system_info_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.auth_data_ != nullptr) {
    delete _impl_.auth_data_;
  }
  _impl_.auth_data_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RegisterInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .common.UUID register_request_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_register_request_id(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .common.UUID agent_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_agent_id(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .common.AgentVersion agent_version = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_agent_version(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .agent.DTO.SystemInformation system_info = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_system_info(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .agent.DTO.AuthenticationData auth_data = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_auth_data(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* RegisterInfo::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:agent.DTO.RegisterInfo)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .common.UUID register_request_id = 1;
  if (this->_internal_has_register_request_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::register_request_id(this),
        _Internal::register_request_id(this).GetCachedSize(), target, stream);
  }

  // .common.UUID agent_id = 2;
  if (this->_internal_has_agent_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::agent_id(this),
        _Internal::agent_id(this).GetCachedSize(), target, stream);
  }

  // .common.AgentVersion agent_version = 3;
  if (this->_internal_has_agent_version()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::agent_version(this),
        _Internal::agent_version(this).GetCachedSize(), target, stream);
  }

  // .agent.DTO.SystemInformation system_info = 4;
  if (this->_internal_has_system_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::system_info(this),
        _Internal::system_info(this).GetCachedSize(), target, stream);
  }

  // .agent.DTO.AuthenticationData auth_data = 5;
  if (this->_internal_has_auth_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::auth_data(this),
        _Internal::auth_data(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:agent.DTO.RegisterInfo)
  return target;
}

::size_t RegisterInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:agent.DTO.RegisterInfo)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .common.UUID register_request_id = 1;
  if (this->_internal_has_register_request_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.register_request_id_);
  }

  // .common.UUID agent_id = 2;
  if (this->_internal_has_agent_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.agent_id_);
  }

  // .common.AgentVersion agent_version = 3;
  if (this->_internal_has_agent_version()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.agent_version_);
  }

  // .agent.DTO.SystemInformation system_info = 4;
  if (this->_internal_has_system_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.system_info_);
  }

  // .agent.DTO.AuthenticationData auth_data = 5;
  if (this->_internal_has_auth_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.auth_data_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RegisterInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RegisterInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RegisterInfo::GetClassData() const { return &_class_data_; }


void RegisterInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RegisterInfo*>(&to_msg);
  auto& from = static_cast<const RegisterInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:agent.DTO.RegisterInfo)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_register_request_id()) {
    _this->_internal_mutable_register_request_id()->::common::UUID::MergeFrom(
        from._internal_register_request_id());
  }
  if (from._internal_has_agent_id()) {
    _this->_internal_mutable_agent_id()->::common::UUID::MergeFrom(
        from._internal_agent_id());
  }
  if (from._internal_has_agent_version()) {
    _this->_internal_mutable_agent_version()->::common::AgentVersion::MergeFrom(
        from._internal_agent_version());
  }
  if (from._internal_has_system_info()) {
    _this->_internal_mutable_system_info()->::agent::DTO::SystemInformation::MergeFrom(
        from._internal_system_info());
  }
  if (from._internal_has_auth_data()) {
    _this->_internal_mutable_auth_data()->::agent::DTO::AuthenticationData::MergeFrom(
        from._internal_auth_data());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RegisterInfo::CopyFrom(const RegisterInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:agent.DTO.RegisterInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterInfo::IsInitialized() const {
  return true;
}

void RegisterInfo::InternalSwap(RegisterInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RegisterInfo, _impl_.auth_data_)
      + sizeof(RegisterInfo::_impl_.auth_data_)
      - PROTOBUF_FIELD_OFFSET(RegisterInfo, _impl_.register_request_id_)>(
          reinterpret_cast<char*>(&_impl_.register_request_id_),
          reinterpret_cast<char*>(&other->_impl_.register_request_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RegisterInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_register_2eproto_getter, &descriptor_table_register_2eproto_once,
      file_level_metadata_register_2eproto[2]);
}
// ===================================================================

class RegisterResult::_Internal {
 public:
  static const ::common::Error& error(const RegisterResult* msg);
};

const ::common::Error&
RegisterResult::_Internal::error(const RegisterResult* msg) {
  return *msg->_impl_.error_;
}
void RegisterResult::clear_error() {
  if (GetArenaForAllocation() == nullptr && _impl_.error_ != nullptr) {
    delete _impl_.error_;
  }
  _impl_.error_ = nullptr;
}
RegisterResult::RegisterResult(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:agent.DTO.RegisterResult)
}
RegisterResult::RegisterResult(const RegisterResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RegisterResult* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.error_){nullptr}
    , decltype(_impl_.status_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_error()) {
    _this->_impl_.error_ = new ::common::Error(*from._impl_.error_);
  }
  _this->_impl_.status_ = from._impl_.status_;
  // @@protoc_insertion_point(copy_constructor:agent.DTO.RegisterResult)
}

inline void RegisterResult::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.error_){nullptr}
    , decltype(_impl_.status_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RegisterResult::~RegisterResult() {
  // @@protoc_insertion_point(destructor:agent.DTO.RegisterResult)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RegisterResult::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.error_;
}

void RegisterResult::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RegisterResult::Clear() {
// @@protoc_insertion_point(message_clear_start:agent.DTO.RegisterResult)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.error_ != nullptr) {
    delete _impl_.error_;
  }
  _impl_.error_ = nullptr;
  _impl_.status_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RegisterResult::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .common.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          ::uint32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::common::Status>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // .common.Error error = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_error(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* RegisterResult::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:agent.DTO.RegisterResult)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .common.Status status = 1;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_status(), target);
  }

  // .common.Error error = 2;
  if (this->_internal_has_error()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::error(this),
        _Internal::error(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:agent.DTO.RegisterResult)
  return target;
}

::size_t RegisterResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:agent.DTO.RegisterResult)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .common.Error error = 2;
  if (this->_internal_has_error()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.error_);
  }

  // .common.Status status = 1;
  if (this->_internal_status() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RegisterResult::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RegisterResult::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RegisterResult::GetClassData() const { return &_class_data_; }


void RegisterResult::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RegisterResult*>(&to_msg);
  auto& from = static_cast<const RegisterResult&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:agent.DTO.RegisterResult)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_error()) {
    _this->_internal_mutable_error()->::common::Error::MergeFrom(
        from._internal_error());
  }
  if (from._internal_status() != 0) {
    _this->_internal_set_status(from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RegisterResult::CopyFrom(const RegisterResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:agent.DTO.RegisterResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterResult::IsInitialized() const {
  return true;
}

void RegisterResult::InternalSwap(RegisterResult* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RegisterResult, _impl_.status_)
      + sizeof(RegisterResult::_impl_.status_)
      - PROTOBUF_FIELD_OFFSET(RegisterResult, _impl_.error_)>(
          reinterpret_cast<char*>(&_impl_.error_),
          reinterpret_cast<char*>(&other->_impl_.error_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RegisterResult::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_register_2eproto_getter, &descriptor_table_register_2eproto_once,
      file_level_metadata_register_2eproto[3]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace DTO
}  // namespace agent
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::agent::DTO::AuthenticationData*
Arena::CreateMaybeMessage< ::agent::DTO::AuthenticationData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::agent::DTO::AuthenticationData >(arena);
}
template<> PROTOBUF_NOINLINE ::agent::DTO::SystemInformation*
Arena::CreateMaybeMessage< ::agent::DTO::SystemInformation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::agent::DTO::SystemInformation >(arena);
}
template<> PROTOBUF_NOINLINE ::agent::DTO::RegisterInfo*
Arena::CreateMaybeMessage< ::agent::DTO::RegisterInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::agent::DTO::RegisterInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::agent::DTO::RegisterResult*
Arena::CreateMaybeMessage< ::agent::DTO::RegisterResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::agent::DTO::RegisterResult >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
