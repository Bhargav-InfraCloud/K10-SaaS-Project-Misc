// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: install-service.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_install_2dservice_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_install_2dservice_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4022000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4022001 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "common.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_install_2dservice_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_install_2dservice_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_install_2dservice_2eproto;
namespace agent {
namespace DTO {
class InstallServiceInfo;
struct InstallServiceInfoDefaultTypeInternal;
extern InstallServiceInfoDefaultTypeInternal _InstallServiceInfo_default_instance_;
class InstallServiceResult;
struct InstallServiceResultDefaultTypeInternal;
extern InstallServiceResultDefaultTypeInternal _InstallServiceResult_default_instance_;
}  // namespace DTO
}  // namespace agent
PROTOBUF_NAMESPACE_OPEN
template <>
::agent::DTO::InstallServiceInfo* Arena::CreateMaybeMessage<::agent::DTO::InstallServiceInfo>(Arena*);
template <>
::agent::DTO::InstallServiceResult* Arena::CreateMaybeMessage<::agent::DTO::InstallServiceResult>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace agent {
namespace DTO {

// ===================================================================


// -------------------------------------------------------------------

class InstallServiceInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:agent.DTO.InstallServiceInfo) */ {
 public:
  inline InstallServiceInfo() : InstallServiceInfo(nullptr) {}
  ~InstallServiceInfo() override;
  explicit PROTOBUF_CONSTEXPR InstallServiceInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InstallServiceInfo(const InstallServiceInfo& from);
  InstallServiceInfo(InstallServiceInfo&& from) noexcept
    : InstallServiceInfo() {
    *this = ::std::move(from);
  }

  inline InstallServiceInfo& operator=(const InstallServiceInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline InstallServiceInfo& operator=(InstallServiceInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InstallServiceInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const InstallServiceInfo* internal_default_instance() {
    return reinterpret_cast<const InstallServiceInfo*>(
               &_InstallServiceInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(InstallServiceInfo& a, InstallServiceInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(InstallServiceInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InstallServiceInfo* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InstallServiceInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InstallServiceInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InstallServiceInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const InstallServiceInfo& from) {
    InstallServiceInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InstallServiceInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "agent.DTO.InstallServiceInfo";
  }
  protected:
  explicit InstallServiceInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInstallServiceRequestIdFieldNumber = 1,
    kAgentIdFieldNumber = 2,
    kServiceVersionFieldNumber = 3,
  };
  // .common.UUID install_service_request_id = 1;
  bool has_install_service_request_id() const;
  private:
  bool _internal_has_install_service_request_id() const;

  public:
  void clear_install_service_request_id() ;
  const ::common::UUID& install_service_request_id() const;
  PROTOBUF_NODISCARD ::common::UUID* release_install_service_request_id();
  ::common::UUID* mutable_install_service_request_id();
  void set_allocated_install_service_request_id(::common::UUID* install_service_request_id);
  private:
  const ::common::UUID& _internal_install_service_request_id() const;
  ::common::UUID* _internal_mutable_install_service_request_id();
  public:
  void unsafe_arena_set_allocated_install_service_request_id(
      ::common::UUID* install_service_request_id);
  ::common::UUID* unsafe_arena_release_install_service_request_id();
  // .common.UUID agent_id = 2;
  bool has_agent_id() const;
  private:
  bool _internal_has_agent_id() const;

  public:
  void clear_agent_id() ;
  const ::common::UUID& agent_id() const;
  PROTOBUF_NODISCARD ::common::UUID* release_agent_id();
  ::common::UUID* mutable_agent_id();
  void set_allocated_agent_id(::common::UUID* agent_id);
  private:
  const ::common::UUID& _internal_agent_id() const;
  ::common::UUID* _internal_mutable_agent_id();
  public:
  void unsafe_arena_set_allocated_agent_id(
      ::common::UUID* agent_id);
  ::common::UUID* unsafe_arena_release_agent_id();
  // .common.ServiceVersion service_version = 3;
  bool has_service_version() const;
  private:
  bool _internal_has_service_version() const;

  public:
  void clear_service_version() ;
  const ::common::ServiceVersion& service_version() const;
  PROTOBUF_NODISCARD ::common::ServiceVersion* release_service_version();
  ::common::ServiceVersion* mutable_service_version();
  void set_allocated_service_version(::common::ServiceVersion* service_version);
  private:
  const ::common::ServiceVersion& _internal_service_version() const;
  ::common::ServiceVersion* _internal_mutable_service_version();
  public:
  void unsafe_arena_set_allocated_service_version(
      ::common::ServiceVersion* service_version);
  ::common::ServiceVersion* unsafe_arena_release_service_version();
  // @@protoc_insertion_point(class_scope:agent.DTO.InstallServiceInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::common::UUID* install_service_request_id_;
    ::common::UUID* agent_id_;
    ::common::ServiceVersion* service_version_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_install_2dservice_2eproto;
};// -------------------------------------------------------------------

class InstallServiceResult final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:agent.DTO.InstallServiceResult) */ {
 public:
  inline InstallServiceResult() : InstallServiceResult(nullptr) {}
  ~InstallServiceResult() override;
  explicit PROTOBUF_CONSTEXPR InstallServiceResult(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InstallServiceResult(const InstallServiceResult& from);
  InstallServiceResult(InstallServiceResult&& from) noexcept
    : InstallServiceResult() {
    *this = ::std::move(from);
  }

  inline InstallServiceResult& operator=(const InstallServiceResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline InstallServiceResult& operator=(InstallServiceResult&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InstallServiceResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const InstallServiceResult* internal_default_instance() {
    return reinterpret_cast<const InstallServiceResult*>(
               &_InstallServiceResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(InstallServiceResult& a, InstallServiceResult& b) {
    a.Swap(&b);
  }
  inline void Swap(InstallServiceResult* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InstallServiceResult* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InstallServiceResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InstallServiceResult>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InstallServiceResult& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const InstallServiceResult& from) {
    InstallServiceResult::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InstallServiceResult* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "agent.DTO.InstallServiceResult";
  }
  protected:
  explicit InstallServiceResult(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // .common.Error error = 2;
  bool has_error() const;
  private:
  bool _internal_has_error() const;

  public:
  void clear_error() ;
  const ::common::Error& error() const;
  PROTOBUF_NODISCARD ::common::Error* release_error();
  ::common::Error* mutable_error();
  void set_allocated_error(::common::Error* error);
  private:
  const ::common::Error& _internal_error() const;
  ::common::Error* _internal_mutable_error();
  public:
  void unsafe_arena_set_allocated_error(
      ::common::Error* error);
  ::common::Error* unsafe_arena_release_error();
  // .common.Status status = 1;
  void clear_status() ;
  ::common::Status status() const;
  void set_status(::common::Status value);

  private:
  ::common::Status _internal_status() const;
  void _internal_set_status(::common::Status value);

  public:
  // @@protoc_insertion_point(class_scope:agent.DTO.InstallServiceResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::common::Error* error_;
    int status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_install_2dservice_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// InstallServiceInfo

// .common.UUID install_service_request_id = 1;
inline bool InstallServiceInfo::_internal_has_install_service_request_id() const {
  return this != internal_default_instance() && _impl_.install_service_request_id_ != nullptr;
}
inline bool InstallServiceInfo::has_install_service_request_id() const {
  return _internal_has_install_service_request_id();
}
inline const ::common::UUID& InstallServiceInfo::_internal_install_service_request_id() const {
  const ::common::UUID* p = _impl_.install_service_request_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::UUID&>(
      ::common::_UUID_default_instance_);
}
inline const ::common::UUID& InstallServiceInfo::install_service_request_id() const {
  // @@protoc_insertion_point(field_get:agent.DTO.InstallServiceInfo.install_service_request_id)
  return _internal_install_service_request_id();
}
inline void InstallServiceInfo::unsafe_arena_set_allocated_install_service_request_id(
    ::common::UUID* install_service_request_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.install_service_request_id_);
  }
  _impl_.install_service_request_id_ = install_service_request_id;
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:agent.DTO.InstallServiceInfo.install_service_request_id)
}
inline ::common::UUID* InstallServiceInfo::release_install_service_request_id() {
  
  ::common::UUID* temp = _impl_.install_service_request_id_;
  _impl_.install_service_request_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::common::UUID* InstallServiceInfo::unsafe_arena_release_install_service_request_id() {
  // @@protoc_insertion_point(field_release:agent.DTO.InstallServiceInfo.install_service_request_id)
  
  ::common::UUID* temp = _impl_.install_service_request_id_;
  _impl_.install_service_request_id_ = nullptr;
  return temp;
}
inline ::common::UUID* InstallServiceInfo::_internal_mutable_install_service_request_id() {
  
  if (_impl_.install_service_request_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::UUID>(GetArenaForAllocation());
    _impl_.install_service_request_id_ = p;
  }
  return _impl_.install_service_request_id_;
}
inline ::common::UUID* InstallServiceInfo::mutable_install_service_request_id() {
  ::common::UUID* _msg = _internal_mutable_install_service_request_id();
  // @@protoc_insertion_point(field_mutable:agent.DTO.InstallServiceInfo.install_service_request_id)
  return _msg;
}
inline void InstallServiceInfo::set_allocated_install_service_request_id(::common::UUID* install_service_request_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.install_service_request_id_);
  }
  if (install_service_request_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(install_service_request_id));
    if (message_arena != submessage_arena) {
      install_service_request_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, install_service_request_id, submessage_arena);
    }

  } else {

  }
  _impl_.install_service_request_id_ = install_service_request_id;
  // @@protoc_insertion_point(field_set_allocated:agent.DTO.InstallServiceInfo.install_service_request_id)
}

// .common.UUID agent_id = 2;
inline bool InstallServiceInfo::_internal_has_agent_id() const {
  return this != internal_default_instance() && _impl_.agent_id_ != nullptr;
}
inline bool InstallServiceInfo::has_agent_id() const {
  return _internal_has_agent_id();
}
inline const ::common::UUID& InstallServiceInfo::_internal_agent_id() const {
  const ::common::UUID* p = _impl_.agent_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::UUID&>(
      ::common::_UUID_default_instance_);
}
inline const ::common::UUID& InstallServiceInfo::agent_id() const {
  // @@protoc_insertion_point(field_get:agent.DTO.InstallServiceInfo.agent_id)
  return _internal_agent_id();
}
inline void InstallServiceInfo::unsafe_arena_set_allocated_agent_id(
    ::common::UUID* agent_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.agent_id_);
  }
  _impl_.agent_id_ = agent_id;
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:agent.DTO.InstallServiceInfo.agent_id)
}
inline ::common::UUID* InstallServiceInfo::release_agent_id() {
  
  ::common::UUID* temp = _impl_.agent_id_;
  _impl_.agent_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::common::UUID* InstallServiceInfo::unsafe_arena_release_agent_id() {
  // @@protoc_insertion_point(field_release:agent.DTO.InstallServiceInfo.agent_id)
  
  ::common::UUID* temp = _impl_.agent_id_;
  _impl_.agent_id_ = nullptr;
  return temp;
}
inline ::common::UUID* InstallServiceInfo::_internal_mutable_agent_id() {
  
  if (_impl_.agent_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::UUID>(GetArenaForAllocation());
    _impl_.agent_id_ = p;
  }
  return _impl_.agent_id_;
}
inline ::common::UUID* InstallServiceInfo::mutable_agent_id() {
  ::common::UUID* _msg = _internal_mutable_agent_id();
  // @@protoc_insertion_point(field_mutable:agent.DTO.InstallServiceInfo.agent_id)
  return _msg;
}
inline void InstallServiceInfo::set_allocated_agent_id(::common::UUID* agent_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.agent_id_);
  }
  if (agent_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(agent_id));
    if (message_arena != submessage_arena) {
      agent_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, agent_id, submessage_arena);
    }

  } else {

  }
  _impl_.agent_id_ = agent_id;
  // @@protoc_insertion_point(field_set_allocated:agent.DTO.InstallServiceInfo.agent_id)
}

// .common.ServiceVersion service_version = 3;
inline bool InstallServiceInfo::_internal_has_service_version() const {
  return this != internal_default_instance() && _impl_.service_version_ != nullptr;
}
inline bool InstallServiceInfo::has_service_version() const {
  return _internal_has_service_version();
}
inline const ::common::ServiceVersion& InstallServiceInfo::_internal_service_version() const {
  const ::common::ServiceVersion* p = _impl_.service_version_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::ServiceVersion&>(
      ::common::_ServiceVersion_default_instance_);
}
inline const ::common::ServiceVersion& InstallServiceInfo::service_version() const {
  // @@protoc_insertion_point(field_get:agent.DTO.InstallServiceInfo.service_version)
  return _internal_service_version();
}
inline void InstallServiceInfo::unsafe_arena_set_allocated_service_version(
    ::common::ServiceVersion* service_version) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.service_version_);
  }
  _impl_.service_version_ = service_version;
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:agent.DTO.InstallServiceInfo.service_version)
}
inline ::common::ServiceVersion* InstallServiceInfo::release_service_version() {
  
  ::common::ServiceVersion* temp = _impl_.service_version_;
  _impl_.service_version_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::common::ServiceVersion* InstallServiceInfo::unsafe_arena_release_service_version() {
  // @@protoc_insertion_point(field_release:agent.DTO.InstallServiceInfo.service_version)
  
  ::common::ServiceVersion* temp = _impl_.service_version_;
  _impl_.service_version_ = nullptr;
  return temp;
}
inline ::common::ServiceVersion* InstallServiceInfo::_internal_mutable_service_version() {
  
  if (_impl_.service_version_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::ServiceVersion>(GetArenaForAllocation());
    _impl_.service_version_ = p;
  }
  return _impl_.service_version_;
}
inline ::common::ServiceVersion* InstallServiceInfo::mutable_service_version() {
  ::common::ServiceVersion* _msg = _internal_mutable_service_version();
  // @@protoc_insertion_point(field_mutable:agent.DTO.InstallServiceInfo.service_version)
  return _msg;
}
inline void InstallServiceInfo::set_allocated_service_version(::common::ServiceVersion* service_version) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.service_version_);
  }
  if (service_version) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(service_version));
    if (message_arena != submessage_arena) {
      service_version = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, service_version, submessage_arena);
    }

  } else {

  }
  _impl_.service_version_ = service_version;
  // @@protoc_insertion_point(field_set_allocated:agent.DTO.InstallServiceInfo.service_version)
}

// -------------------------------------------------------------------

// InstallServiceResult

// .common.Status status = 1;
inline void InstallServiceResult::clear_status() {
  _impl_.status_ = 0;
}
inline ::common::Status InstallServiceResult::status() const {
  // @@protoc_insertion_point(field_get:agent.DTO.InstallServiceResult.status)
  return _internal_status();
}
inline void InstallServiceResult::set_status(::common::Status value) {
   _internal_set_status(value);
  // @@protoc_insertion_point(field_set:agent.DTO.InstallServiceResult.status)
}
inline ::common::Status InstallServiceResult::_internal_status() const {
  return static_cast<::common::Status>(_impl_.status_);
}
inline void InstallServiceResult::_internal_set_status(::common::Status value) {
  ;
  _impl_.status_ = value;
}

// .common.Error error = 2;
inline bool InstallServiceResult::_internal_has_error() const {
  return this != internal_default_instance() && _impl_.error_ != nullptr;
}
inline bool InstallServiceResult::has_error() const {
  return _internal_has_error();
}
inline const ::common::Error& InstallServiceResult::_internal_error() const {
  const ::common::Error* p = _impl_.error_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::Error&>(
      ::common::_Error_default_instance_);
}
inline const ::common::Error& InstallServiceResult::error() const {
  // @@protoc_insertion_point(field_get:agent.DTO.InstallServiceResult.error)
  return _internal_error();
}
inline void InstallServiceResult::unsafe_arena_set_allocated_error(
    ::common::Error* error) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.error_);
  }
  _impl_.error_ = error;
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:agent.DTO.InstallServiceResult.error)
}
inline ::common::Error* InstallServiceResult::release_error() {
  
  ::common::Error* temp = _impl_.error_;
  _impl_.error_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::common::Error* InstallServiceResult::unsafe_arena_release_error() {
  // @@protoc_insertion_point(field_release:agent.DTO.InstallServiceResult.error)
  
  ::common::Error* temp = _impl_.error_;
  _impl_.error_ = nullptr;
  return temp;
}
inline ::common::Error* InstallServiceResult::_internal_mutable_error() {
  
  if (_impl_.error_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::Error>(GetArenaForAllocation());
    _impl_.error_ = p;
  }
  return _impl_.error_;
}
inline ::common::Error* InstallServiceResult::mutable_error() {
  ::common::Error* _msg = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:agent.DTO.InstallServiceResult.error)
  return _msg;
}
inline void InstallServiceResult::set_allocated_error(::common::Error* error) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.error_);
  }
  if (error) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(error));
    if (message_arena != submessage_arena) {
      error = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }

  } else {

  }
  _impl_.error_ = error;
  // @@protoc_insertion_point(field_set_allocated:agent.DTO.InstallServiceResult.error)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace DTO
}  // namespace agent


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_install_2dservice_2eproto_2epb_2eh
