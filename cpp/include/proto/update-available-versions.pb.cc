// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: update-available-versions.proto

#include "update-available-versions.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace agent {
namespace DTO {
PROTOBUF_CONSTEXPR VersionMatrix::VersionMatrix(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.service_version_)*/{}
  , /*decltype(_impl_.agent_version_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct VersionMatrixDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VersionMatrixDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~VersionMatrixDefaultTypeInternal() {}
  union {
    VersionMatrix _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VersionMatrixDefaultTypeInternal _VersionMatrix_default_instance_;
PROTOBUF_CONSTEXPR UpdateAvailableVersionsInfo::UpdateAvailableVersionsInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.upgradable_versions_)*/{}
  , /*decltype(_impl_.update_available_versions_request_id_)*/nullptr
  , /*decltype(_impl_.agent_id_)*/nullptr
  , /*decltype(_impl_.current_agent_version_)*/nullptr
  , /*decltype(_impl_.current_service_version_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UpdateAvailableVersionsInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UpdateAvailableVersionsInfoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~UpdateAvailableVersionsInfoDefaultTypeInternal() {}
  union {
    UpdateAvailableVersionsInfo _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UpdateAvailableVersionsInfoDefaultTypeInternal _UpdateAvailableVersionsInfo_default_instance_;
PROTOBUF_CONSTEXPR UpdateAvailableVersionsResult::UpdateAvailableVersionsResult(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.error_)*/nullptr
  , /*decltype(_impl_.status_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UpdateAvailableVersionsResultDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UpdateAvailableVersionsResultDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~UpdateAvailableVersionsResultDefaultTypeInternal() {}
  union {
    UpdateAvailableVersionsResult _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UpdateAvailableVersionsResultDefaultTypeInternal _UpdateAvailableVersionsResult_default_instance_;
}  // namespace DTO
}  // namespace agent
static ::_pb::Metadata file_level_metadata_update_2davailable_2dversions_2eproto[3];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_update_2davailable_2dversions_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_update_2davailable_2dversions_2eproto = nullptr;
const ::uint32_t TableStruct_update_2davailable_2dversions_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::agent::DTO::VersionMatrix, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::agent::DTO::VersionMatrix, _impl_.agent_version_),
    PROTOBUF_FIELD_OFFSET(::agent::DTO::VersionMatrix, _impl_.service_version_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::agent::DTO::UpdateAvailableVersionsInfo, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::agent::DTO::UpdateAvailableVersionsInfo, _impl_.update_available_versions_request_id_),
    PROTOBUF_FIELD_OFFSET(::agent::DTO::UpdateAvailableVersionsInfo, _impl_.agent_id_),
    PROTOBUF_FIELD_OFFSET(::agent::DTO::UpdateAvailableVersionsInfo, _impl_.current_agent_version_),
    PROTOBUF_FIELD_OFFSET(::agent::DTO::UpdateAvailableVersionsInfo, _impl_.current_service_version_),
    PROTOBUF_FIELD_OFFSET(::agent::DTO::UpdateAvailableVersionsInfo, _impl_.upgradable_versions_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::agent::DTO::UpdateAvailableVersionsResult, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::agent::DTO::UpdateAvailableVersionsResult, _impl_.status_),
    PROTOBUF_FIELD_OFFSET(::agent::DTO::UpdateAvailableVersionsResult, _impl_.error_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, -1, -1, sizeof(::agent::DTO::VersionMatrix)},
        { 10, -1, -1, sizeof(::agent::DTO::UpdateAvailableVersionsInfo)},
        { 23, -1, -1, sizeof(::agent::DTO::UpdateAvailableVersionsResult)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::agent::DTO::_VersionMatrix_default_instance_._instance,
    &::agent::DTO::_UpdateAvailableVersionsInfo_default_instance_._instance,
    &::agent::DTO::_UpdateAvailableVersionsResult_default_instance_._instance,
};
const char descriptor_table_protodef_update_2davailable_2dversions_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\037update-available-versions.proto\022\tagent"
    ".DTO\032\014common.proto\"m\n\rVersionMatrix\022+\n\ra"
    "gent_version\030\001 \001(\0132\024.common.AgentVersion"
    "\022/\n\017service_version\030\002 \003(\0132\026.common.Servi"
    "ceVersion\"\236\002\n\033UpdateAvailableVersionsInf"
    "o\022:\n$update_available_versions_request_i"
    "d\030\001 \001(\0132\014.common.UUID\022\036\n\010agent_id\030\002 \001(\0132"
    "\014.common.UUID\0223\n\025current_agent_version\030\003"
    " \001(\0132\024.common.AgentVersion\0227\n\027current_se"
    "rvice_version\030\004 \001(\0132\026.common.ServiceVers"
    "ion\0225\n\023upgradable_versions\030\005 \003(\0132\030.agent"
    ".DTO.VersionMatrix\"]\n\035UpdateAvailableVer"
    "sionsResult\022\036\n\006status\030\001 \001(\0162\016.common.Sta"
    "tus\022\034\n\005error\030\002 \001(\0132\r.common.Errorb\006proto"
    "3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_update_2davailable_2dversions_2eproto_deps[1] =
    {
        &::descriptor_table_common_2eproto,
};
static ::absl::once_flag descriptor_table_update_2davailable_2dversions_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_update_2davailable_2dversions_2eproto = {
    false,
    false,
    561,
    descriptor_table_protodef_update_2davailable_2dversions_2eproto,
    "update-available-versions.proto",
    &descriptor_table_update_2davailable_2dversions_2eproto_once,
    descriptor_table_update_2davailable_2dversions_2eproto_deps,
    1,
    3,
    schemas,
    file_default_instances,
    TableStruct_update_2davailable_2dversions_2eproto::offsets,
    file_level_metadata_update_2davailable_2dversions_2eproto,
    file_level_enum_descriptors_update_2davailable_2dversions_2eproto,
    file_level_service_descriptors_update_2davailable_2dversions_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_update_2davailable_2dversions_2eproto_getter() {
  return &descriptor_table_update_2davailable_2dversions_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_update_2davailable_2dversions_2eproto(&descriptor_table_update_2davailable_2dversions_2eproto);
namespace agent {
namespace DTO {
// ===================================================================

class VersionMatrix::_Internal {
 public:
  static const ::common::AgentVersion& agent_version(const VersionMatrix* msg);
};

const ::common::AgentVersion&
VersionMatrix::_Internal::agent_version(const VersionMatrix* msg) {
  return *msg->_impl_.agent_version_;
}
void VersionMatrix::clear_agent_version() {
  if (GetArenaForAllocation() == nullptr && _impl_.agent_version_ != nullptr) {
    delete _impl_.agent_version_;
  }
  _impl_.agent_version_ = nullptr;
}
void VersionMatrix::clear_service_version() {
  _impl_.service_version_.Clear();
}
VersionMatrix::VersionMatrix(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:agent.DTO.VersionMatrix)
}
VersionMatrix::VersionMatrix(const VersionMatrix& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  VersionMatrix* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.service_version_){from._impl_.service_version_}
    , decltype(_impl_.agent_version_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_agent_version()) {
    _this->_impl_.agent_version_ = new ::common::AgentVersion(*from._impl_.agent_version_);
  }
  // @@protoc_insertion_point(copy_constructor:agent.DTO.VersionMatrix)
}

inline void VersionMatrix::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.service_version_){arena}
    , decltype(_impl_.agent_version_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

VersionMatrix::~VersionMatrix() {
  // @@protoc_insertion_point(destructor:agent.DTO.VersionMatrix)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VersionMatrix::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.service_version_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.agent_version_;
}

void VersionMatrix::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void VersionMatrix::Clear() {
// @@protoc_insertion_point(message_clear_start:agent.DTO.VersionMatrix)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.service_version_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.agent_version_ != nullptr) {
    delete _impl_.agent_version_;
  }
  _impl_.agent_version_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VersionMatrix::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .common.AgentVersion agent_version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_agent_version(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .common.ServiceVersion service_version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_service_version(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* VersionMatrix::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:agent.DTO.VersionMatrix)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .common.AgentVersion agent_version = 1;
  if (this->_internal_has_agent_version()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::agent_version(this),
        _Internal::agent_version(this).GetCachedSize(), target, stream);
  }

  // repeated .common.ServiceVersion service_version = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_service_version_size()); i < n; i++) {
    const auto& repfield = this->_internal_service_version(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:agent.DTO.VersionMatrix)
  return target;
}

::size_t VersionMatrix::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:agent.DTO.VersionMatrix)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .common.ServiceVersion service_version = 2;
  total_size += 1UL * this->_internal_service_version_size();
  for (const auto& msg : this->_impl_.service_version_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .common.AgentVersion agent_version = 1;
  if (this->_internal_has_agent_version()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.agent_version_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VersionMatrix::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    VersionMatrix::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VersionMatrix::GetClassData() const { return &_class_data_; }


void VersionMatrix::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<VersionMatrix*>(&to_msg);
  auto& from = static_cast<const VersionMatrix&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:agent.DTO.VersionMatrix)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.service_version_.MergeFrom(from._impl_.service_version_);
  if (from._internal_has_agent_version()) {
    _this->_internal_mutable_agent_version()->::common::AgentVersion::MergeFrom(
        from._internal_agent_version());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VersionMatrix::CopyFrom(const VersionMatrix& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:agent.DTO.VersionMatrix)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VersionMatrix::IsInitialized() const {
  return true;
}

void VersionMatrix::InternalSwap(VersionMatrix* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.service_version_.InternalSwap(&other->_impl_.service_version_);
  swap(_impl_.agent_version_, other->_impl_.agent_version_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VersionMatrix::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_update_2davailable_2dversions_2eproto_getter, &descriptor_table_update_2davailable_2dversions_2eproto_once,
      file_level_metadata_update_2davailable_2dversions_2eproto[0]);
}
// ===================================================================

class UpdateAvailableVersionsInfo::_Internal {
 public:
  static const ::common::UUID& update_available_versions_request_id(const UpdateAvailableVersionsInfo* msg);
  static const ::common::UUID& agent_id(const UpdateAvailableVersionsInfo* msg);
  static const ::common::AgentVersion& current_agent_version(const UpdateAvailableVersionsInfo* msg);
  static const ::common::ServiceVersion& current_service_version(const UpdateAvailableVersionsInfo* msg);
};

const ::common::UUID&
UpdateAvailableVersionsInfo::_Internal::update_available_versions_request_id(const UpdateAvailableVersionsInfo* msg) {
  return *msg->_impl_.update_available_versions_request_id_;
}
const ::common::UUID&
UpdateAvailableVersionsInfo::_Internal::agent_id(const UpdateAvailableVersionsInfo* msg) {
  return *msg->_impl_.agent_id_;
}
const ::common::AgentVersion&
UpdateAvailableVersionsInfo::_Internal::current_agent_version(const UpdateAvailableVersionsInfo* msg) {
  return *msg->_impl_.current_agent_version_;
}
const ::common::ServiceVersion&
UpdateAvailableVersionsInfo::_Internal::current_service_version(const UpdateAvailableVersionsInfo* msg) {
  return *msg->_impl_.current_service_version_;
}
void UpdateAvailableVersionsInfo::clear_update_available_versions_request_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.update_available_versions_request_id_ != nullptr) {
    delete _impl_.update_available_versions_request_id_;
  }
  _impl_.update_available_versions_request_id_ = nullptr;
}
void UpdateAvailableVersionsInfo::clear_agent_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.agent_id_ != nullptr) {
    delete _impl_.agent_id_;
  }
  _impl_.agent_id_ = nullptr;
}
void UpdateAvailableVersionsInfo::clear_current_agent_version() {
  if (GetArenaForAllocation() == nullptr && _impl_.current_agent_version_ != nullptr) {
    delete _impl_.current_agent_version_;
  }
  _impl_.current_agent_version_ = nullptr;
}
void UpdateAvailableVersionsInfo::clear_current_service_version() {
  if (GetArenaForAllocation() == nullptr && _impl_.current_service_version_ != nullptr) {
    delete _impl_.current_service_version_;
  }
  _impl_.current_service_version_ = nullptr;
}
UpdateAvailableVersionsInfo::UpdateAvailableVersionsInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:agent.DTO.UpdateAvailableVersionsInfo)
}
UpdateAvailableVersionsInfo::UpdateAvailableVersionsInfo(const UpdateAvailableVersionsInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UpdateAvailableVersionsInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.upgradable_versions_){from._impl_.upgradable_versions_}
    , decltype(_impl_.update_available_versions_request_id_){nullptr}
    , decltype(_impl_.agent_id_){nullptr}
    , decltype(_impl_.current_agent_version_){nullptr}
    , decltype(_impl_.current_service_version_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_update_available_versions_request_id()) {
    _this->_impl_.update_available_versions_request_id_ = new ::common::UUID(*from._impl_.update_available_versions_request_id_);
  }
  if (from._internal_has_agent_id()) {
    _this->_impl_.agent_id_ = new ::common::UUID(*from._impl_.agent_id_);
  }
  if (from._internal_has_current_agent_version()) {
    _this->_impl_.current_agent_version_ = new ::common::AgentVersion(*from._impl_.current_agent_version_);
  }
  if (from._internal_has_current_service_version()) {
    _this->_impl_.current_service_version_ = new ::common::ServiceVersion(*from._impl_.current_service_version_);
  }
  // @@protoc_insertion_point(copy_constructor:agent.DTO.UpdateAvailableVersionsInfo)
}

inline void UpdateAvailableVersionsInfo::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.upgradable_versions_){arena}
    , decltype(_impl_.update_available_versions_request_id_){nullptr}
    , decltype(_impl_.agent_id_){nullptr}
    , decltype(_impl_.current_agent_version_){nullptr}
    , decltype(_impl_.current_service_version_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

UpdateAvailableVersionsInfo::~UpdateAvailableVersionsInfo() {
  // @@protoc_insertion_point(destructor:agent.DTO.UpdateAvailableVersionsInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UpdateAvailableVersionsInfo::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.upgradable_versions_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.update_available_versions_request_id_;
  if (this != internal_default_instance()) delete _impl_.agent_id_;
  if (this != internal_default_instance()) delete _impl_.current_agent_version_;
  if (this != internal_default_instance()) delete _impl_.current_service_version_;
}

void UpdateAvailableVersionsInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UpdateAvailableVersionsInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:agent.DTO.UpdateAvailableVersionsInfo)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.upgradable_versions_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.update_available_versions_request_id_ != nullptr) {
    delete _impl_.update_available_versions_request_id_;
  }
  _impl_.update_available_versions_request_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.agent_id_ != nullptr) {
    delete _impl_.agent_id_;
  }
  _impl_.agent_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.current_agent_version_ != nullptr) {
    delete _impl_.current_agent_version_;
  }
  _impl_.current_agent_version_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.current_service_version_ != nullptr) {
    delete _impl_.current_service_version_;
  }
  _impl_.current_service_version_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateAvailableVersionsInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .common.UUID update_available_versions_request_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_update_available_versions_request_id(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .common.UUID agent_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_agent_id(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .common.AgentVersion current_agent_version = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_current_agent_version(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .common.ServiceVersion current_service_version = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_current_service_version(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .agent.DTO.VersionMatrix upgradable_versions = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_upgradable_versions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* UpdateAvailableVersionsInfo::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:agent.DTO.UpdateAvailableVersionsInfo)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .common.UUID update_available_versions_request_id = 1;
  if (this->_internal_has_update_available_versions_request_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::update_available_versions_request_id(this),
        _Internal::update_available_versions_request_id(this).GetCachedSize(), target, stream);
  }

  // .common.UUID agent_id = 2;
  if (this->_internal_has_agent_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::agent_id(this),
        _Internal::agent_id(this).GetCachedSize(), target, stream);
  }

  // .common.AgentVersion current_agent_version = 3;
  if (this->_internal_has_current_agent_version()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::current_agent_version(this),
        _Internal::current_agent_version(this).GetCachedSize(), target, stream);
  }

  // .common.ServiceVersion current_service_version = 4;
  if (this->_internal_has_current_service_version()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::current_service_version(this),
        _Internal::current_service_version(this).GetCachedSize(), target, stream);
  }

  // repeated .agent.DTO.VersionMatrix upgradable_versions = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_upgradable_versions_size()); i < n; i++) {
    const auto& repfield = this->_internal_upgradable_versions(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:agent.DTO.UpdateAvailableVersionsInfo)
  return target;
}

::size_t UpdateAvailableVersionsInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:agent.DTO.UpdateAvailableVersionsInfo)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .agent.DTO.VersionMatrix upgradable_versions = 5;
  total_size += 1UL * this->_internal_upgradable_versions_size();
  for (const auto& msg : this->_impl_.upgradable_versions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .common.UUID update_available_versions_request_id = 1;
  if (this->_internal_has_update_available_versions_request_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.update_available_versions_request_id_);
  }

  // .common.UUID agent_id = 2;
  if (this->_internal_has_agent_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.agent_id_);
  }

  // .common.AgentVersion current_agent_version = 3;
  if (this->_internal_has_current_agent_version()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.current_agent_version_);
  }

  // .common.ServiceVersion current_service_version = 4;
  if (this->_internal_has_current_service_version()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.current_service_version_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UpdateAvailableVersionsInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UpdateAvailableVersionsInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UpdateAvailableVersionsInfo::GetClassData() const { return &_class_data_; }


void UpdateAvailableVersionsInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UpdateAvailableVersionsInfo*>(&to_msg);
  auto& from = static_cast<const UpdateAvailableVersionsInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:agent.DTO.UpdateAvailableVersionsInfo)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.upgradable_versions_.MergeFrom(from._impl_.upgradable_versions_);
  if (from._internal_has_update_available_versions_request_id()) {
    _this->_internal_mutable_update_available_versions_request_id()->::common::UUID::MergeFrom(
        from._internal_update_available_versions_request_id());
  }
  if (from._internal_has_agent_id()) {
    _this->_internal_mutable_agent_id()->::common::UUID::MergeFrom(
        from._internal_agent_id());
  }
  if (from._internal_has_current_agent_version()) {
    _this->_internal_mutable_current_agent_version()->::common::AgentVersion::MergeFrom(
        from._internal_current_agent_version());
  }
  if (from._internal_has_current_service_version()) {
    _this->_internal_mutable_current_service_version()->::common::ServiceVersion::MergeFrom(
        from._internal_current_service_version());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UpdateAvailableVersionsInfo::CopyFrom(const UpdateAvailableVersionsInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:agent.DTO.UpdateAvailableVersionsInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateAvailableVersionsInfo::IsInitialized() const {
  return true;
}

void UpdateAvailableVersionsInfo::InternalSwap(UpdateAvailableVersionsInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.upgradable_versions_.InternalSwap(&other->_impl_.upgradable_versions_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UpdateAvailableVersionsInfo, _impl_.current_service_version_)
      + sizeof(UpdateAvailableVersionsInfo::_impl_.current_service_version_)
      - PROTOBUF_FIELD_OFFSET(UpdateAvailableVersionsInfo, _impl_.update_available_versions_request_id_)>(
          reinterpret_cast<char*>(&_impl_.update_available_versions_request_id_),
          reinterpret_cast<char*>(&other->_impl_.update_available_versions_request_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateAvailableVersionsInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_update_2davailable_2dversions_2eproto_getter, &descriptor_table_update_2davailable_2dversions_2eproto_once,
      file_level_metadata_update_2davailable_2dversions_2eproto[1]);
}
// ===================================================================

class UpdateAvailableVersionsResult::_Internal {
 public:
  static const ::common::Error& error(const UpdateAvailableVersionsResult* msg);
};

const ::common::Error&
UpdateAvailableVersionsResult::_Internal::error(const UpdateAvailableVersionsResult* msg) {
  return *msg->_impl_.error_;
}
void UpdateAvailableVersionsResult::clear_error() {
  if (GetArenaForAllocation() == nullptr && _impl_.error_ != nullptr) {
    delete _impl_.error_;
  }
  _impl_.error_ = nullptr;
}
UpdateAvailableVersionsResult::UpdateAvailableVersionsResult(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:agent.DTO.UpdateAvailableVersionsResult)
}
UpdateAvailableVersionsResult::UpdateAvailableVersionsResult(const UpdateAvailableVersionsResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UpdateAvailableVersionsResult* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.error_){nullptr}
    , decltype(_impl_.status_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_error()) {
    _this->_impl_.error_ = new ::common::Error(*from._impl_.error_);
  }
  _this->_impl_.status_ = from._impl_.status_;
  // @@protoc_insertion_point(copy_constructor:agent.DTO.UpdateAvailableVersionsResult)
}

inline void UpdateAvailableVersionsResult::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.error_){nullptr}
    , decltype(_impl_.status_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

UpdateAvailableVersionsResult::~UpdateAvailableVersionsResult() {
  // @@protoc_insertion_point(destructor:agent.DTO.UpdateAvailableVersionsResult)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UpdateAvailableVersionsResult::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.error_;
}

void UpdateAvailableVersionsResult::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UpdateAvailableVersionsResult::Clear() {
// @@protoc_insertion_point(message_clear_start:agent.DTO.UpdateAvailableVersionsResult)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.error_ != nullptr) {
    delete _impl_.error_;
  }
  _impl_.error_ = nullptr;
  _impl_.status_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateAvailableVersionsResult::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .common.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          ::uint32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::common::Status>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // .common.Error error = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_error(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* UpdateAvailableVersionsResult::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:agent.DTO.UpdateAvailableVersionsResult)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .common.Status status = 1;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_status(), target);
  }

  // .common.Error error = 2;
  if (this->_internal_has_error()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::error(this),
        _Internal::error(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:agent.DTO.UpdateAvailableVersionsResult)
  return target;
}

::size_t UpdateAvailableVersionsResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:agent.DTO.UpdateAvailableVersionsResult)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .common.Error error = 2;
  if (this->_internal_has_error()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.error_);
  }

  // .common.Status status = 1;
  if (this->_internal_status() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UpdateAvailableVersionsResult::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UpdateAvailableVersionsResult::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UpdateAvailableVersionsResult::GetClassData() const { return &_class_data_; }


void UpdateAvailableVersionsResult::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UpdateAvailableVersionsResult*>(&to_msg);
  auto& from = static_cast<const UpdateAvailableVersionsResult&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:agent.DTO.UpdateAvailableVersionsResult)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_error()) {
    _this->_internal_mutable_error()->::common::Error::MergeFrom(
        from._internal_error());
  }
  if (from._internal_status() != 0) {
    _this->_internal_set_status(from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UpdateAvailableVersionsResult::CopyFrom(const UpdateAvailableVersionsResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:agent.DTO.UpdateAvailableVersionsResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateAvailableVersionsResult::IsInitialized() const {
  return true;
}

void UpdateAvailableVersionsResult::InternalSwap(UpdateAvailableVersionsResult* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UpdateAvailableVersionsResult, _impl_.status_)
      + sizeof(UpdateAvailableVersionsResult::_impl_.status_)
      - PROTOBUF_FIELD_OFFSET(UpdateAvailableVersionsResult, _impl_.error_)>(
          reinterpret_cast<char*>(&_impl_.error_),
          reinterpret_cast<char*>(&other->_impl_.error_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateAvailableVersionsResult::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_update_2davailable_2dversions_2eproto_getter, &descriptor_table_update_2davailable_2dversions_2eproto_once,
      file_level_metadata_update_2davailable_2dversions_2eproto[2]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace DTO
}  // namespace agent
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::agent::DTO::VersionMatrix*
Arena::CreateMaybeMessage< ::agent::DTO::VersionMatrix >(Arena* arena) {
  return Arena::CreateMessageInternal< ::agent::DTO::VersionMatrix >(arena);
}
template<> PROTOBUF_NOINLINE ::agent::DTO::UpdateAvailableVersionsInfo*
Arena::CreateMaybeMessage< ::agent::DTO::UpdateAvailableVersionsInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::agent::DTO::UpdateAvailableVersionsInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::agent::DTO::UpdateAvailableVersionsResult*
Arena::CreateMaybeMessage< ::agent::DTO::UpdateAvailableVersionsResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::agent::DTO::UpdateAvailableVersionsResult >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
