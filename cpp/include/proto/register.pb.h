// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: register.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_register_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_register_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4022000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4022001 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "common.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_register_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_register_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_register_2eproto;
namespace agent {
namespace DTO {
class AuthenticationData;
struct AuthenticationDataDefaultTypeInternal;
extern AuthenticationDataDefaultTypeInternal _AuthenticationData_default_instance_;
class RegisterInfo;
struct RegisterInfoDefaultTypeInternal;
extern RegisterInfoDefaultTypeInternal _RegisterInfo_default_instance_;
class RegisterResult;
struct RegisterResultDefaultTypeInternal;
extern RegisterResultDefaultTypeInternal _RegisterResult_default_instance_;
class SystemInformation;
struct SystemInformationDefaultTypeInternal;
extern SystemInformationDefaultTypeInternal _SystemInformation_default_instance_;
}  // namespace DTO
}  // namespace agent
PROTOBUF_NAMESPACE_OPEN
template <>
::agent::DTO::AuthenticationData* Arena::CreateMaybeMessage<::agent::DTO::AuthenticationData>(Arena*);
template <>
::agent::DTO::RegisterInfo* Arena::CreateMaybeMessage<::agent::DTO::RegisterInfo>(Arena*);
template <>
::agent::DTO::RegisterResult* Arena::CreateMaybeMessage<::agent::DTO::RegisterResult>(Arena*);
template <>
::agent::DTO::SystemInformation* Arena::CreateMaybeMessage<::agent::DTO::SystemInformation>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace agent {
namespace DTO {
enum AuthenticationType : int {
  Unknown = 0,
  Certificate = 1,
  AuthenticationType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  AuthenticationType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool AuthenticationType_IsValid(int value);
constexpr AuthenticationType AuthenticationType_MIN = static_cast<AuthenticationType>(0);
constexpr AuthenticationType AuthenticationType_MAX = static_cast<AuthenticationType>(1);
constexpr int AuthenticationType_ARRAYSIZE = 1 + 1;
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
AuthenticationType_descriptor();
template <typename T>
const std::string& AuthenticationType_Name(T value) {
  static_assert(std::is_same<T, AuthenticationType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to AuthenticationType_Name().");
  return AuthenticationType_Name(static_cast<AuthenticationType>(value));
}
template <>
inline const std::string& AuthenticationType_Name(AuthenticationType value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfDenseEnum<AuthenticationType_descriptor,
                                                 0, 1>(
      static_cast<int>(value));
}
inline bool AuthenticationType_Parse(absl::string_view name, AuthenticationType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<AuthenticationType>(
      AuthenticationType_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class AuthenticationData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:agent.DTO.AuthenticationData) */ {
 public:
  inline AuthenticationData() : AuthenticationData(nullptr) {}
  ~AuthenticationData() override;
  explicit PROTOBUF_CONSTEXPR AuthenticationData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AuthenticationData(const AuthenticationData& from);
  AuthenticationData(AuthenticationData&& from) noexcept
    : AuthenticationData() {
    *this = ::std::move(from);
  }

  inline AuthenticationData& operator=(const AuthenticationData& from) {
    CopyFrom(from);
    return *this;
  }
  inline AuthenticationData& operator=(AuthenticationData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AuthenticationData& default_instance() {
    return *internal_default_instance();
  }
  static inline const AuthenticationData* internal_default_instance() {
    return reinterpret_cast<const AuthenticationData*>(
               &_AuthenticationData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AuthenticationData& a, AuthenticationData& b) {
    a.Swap(&b);
  }
  inline void Swap(AuthenticationData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AuthenticationData* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AuthenticationData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AuthenticationData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AuthenticationData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AuthenticationData& from) {
    AuthenticationData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AuthenticationData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "agent.DTO.AuthenticationData";
  }
  protected:
  explicit AuthenticationData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTenantIdFieldNumber = 2,
    kAuthTypeFieldNumber = 1,
  };
  // .common.UUID tenant_id = 2;
  bool has_tenant_id() const;
  private:
  bool _internal_has_tenant_id() const;

  public:
  void clear_tenant_id() ;
  const ::common::UUID& tenant_id() const;
  PROTOBUF_NODISCARD ::common::UUID* release_tenant_id();
  ::common::UUID* mutable_tenant_id();
  void set_allocated_tenant_id(::common::UUID* tenant_id);
  private:
  const ::common::UUID& _internal_tenant_id() const;
  ::common::UUID* _internal_mutable_tenant_id();
  public:
  void unsafe_arena_set_allocated_tenant_id(
      ::common::UUID* tenant_id);
  ::common::UUID* unsafe_arena_release_tenant_id();
  // .agent.DTO.AuthenticationType auth_type = 1;
  void clear_auth_type() ;
  ::agent::DTO::AuthenticationType auth_type() const;
  void set_auth_type(::agent::DTO::AuthenticationType value);

  private:
  ::agent::DTO::AuthenticationType _internal_auth_type() const;
  void _internal_set_auth_type(::agent::DTO::AuthenticationType value);

  public:
  // @@protoc_insertion_point(class_scope:agent.DTO.AuthenticationData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::common::UUID* tenant_id_;
    int auth_type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_register_2eproto;
};// -------------------------------------------------------------------

class SystemInformation final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:agent.DTO.SystemInformation) */ {
 public:
  inline SystemInformation() : SystemInformation(nullptr) {}
  ~SystemInformation() override;
  explicit PROTOBUF_CONSTEXPR SystemInformation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SystemInformation(const SystemInformation& from);
  SystemInformation(SystemInformation&& from) noexcept
    : SystemInformation() {
    *this = ::std::move(from);
  }

  inline SystemInformation& operator=(const SystemInformation& from) {
    CopyFrom(from);
    return *this;
  }
  inline SystemInformation& operator=(SystemInformation&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SystemInformation& default_instance() {
    return *internal_default_instance();
  }
  static inline const SystemInformation* internal_default_instance() {
    return reinterpret_cast<const SystemInformation*>(
               &_SystemInformation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SystemInformation& a, SystemInformation& b) {
    a.Swap(&b);
  }
  inline void Swap(SystemInformation* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SystemInformation* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SystemInformation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SystemInformation>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SystemInformation& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SystemInformation& from) {
    SystemInformation::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SystemInformation* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "agent.DTO.SystemInformation";
  }
  protected:
  explicit SystemInformation(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKubernetesVersionFieldNumber = 1,
  };
  // string kubernetes_version = 1;
  void clear_kubernetes_version() ;
  const std::string& kubernetes_version() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_kubernetes_version(Arg_&& arg, Args_... args);
  std::string* mutable_kubernetes_version();
  PROTOBUF_NODISCARD std::string* release_kubernetes_version();
  void set_allocated_kubernetes_version(std::string* ptr);

  private:
  const std::string& _internal_kubernetes_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_kubernetes_version(
      const std::string& value);
  std::string* _internal_mutable_kubernetes_version();

  public:
  // @@protoc_insertion_point(class_scope:agent.DTO.SystemInformation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr kubernetes_version_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_register_2eproto;
};// -------------------------------------------------------------------

class RegisterInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:agent.DTO.RegisterInfo) */ {
 public:
  inline RegisterInfo() : RegisterInfo(nullptr) {}
  ~RegisterInfo() override;
  explicit PROTOBUF_CONSTEXPR RegisterInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RegisterInfo(const RegisterInfo& from);
  RegisterInfo(RegisterInfo&& from) noexcept
    : RegisterInfo() {
    *this = ::std::move(from);
  }

  inline RegisterInfo& operator=(const RegisterInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegisterInfo& operator=(RegisterInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RegisterInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const RegisterInfo* internal_default_instance() {
    return reinterpret_cast<const RegisterInfo*>(
               &_RegisterInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(RegisterInfo& a, RegisterInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(RegisterInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RegisterInfo* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RegisterInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RegisterInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RegisterInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RegisterInfo& from) {
    RegisterInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegisterInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "agent.DTO.RegisterInfo";
  }
  protected:
  explicit RegisterInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRegisterRequestIdFieldNumber = 1,
    kAgentIdFieldNumber = 2,
    kAgentVersionFieldNumber = 3,
    kSystemInfoFieldNumber = 4,
    kAuthDataFieldNumber = 5,
  };
  // .common.UUID register_request_id = 1;
  bool has_register_request_id() const;
  private:
  bool _internal_has_register_request_id() const;

  public:
  void clear_register_request_id() ;
  const ::common::UUID& register_request_id() const;
  PROTOBUF_NODISCARD ::common::UUID* release_register_request_id();
  ::common::UUID* mutable_register_request_id();
  void set_allocated_register_request_id(::common::UUID* register_request_id);
  private:
  const ::common::UUID& _internal_register_request_id() const;
  ::common::UUID* _internal_mutable_register_request_id();
  public:
  void unsafe_arena_set_allocated_register_request_id(
      ::common::UUID* register_request_id);
  ::common::UUID* unsafe_arena_release_register_request_id();
  // .common.UUID agent_id = 2;
  bool has_agent_id() const;
  private:
  bool _internal_has_agent_id() const;

  public:
  void clear_agent_id() ;
  const ::common::UUID& agent_id() const;
  PROTOBUF_NODISCARD ::common::UUID* release_agent_id();
  ::common::UUID* mutable_agent_id();
  void set_allocated_agent_id(::common::UUID* agent_id);
  private:
  const ::common::UUID& _internal_agent_id() const;
  ::common::UUID* _internal_mutable_agent_id();
  public:
  void unsafe_arena_set_allocated_agent_id(
      ::common::UUID* agent_id);
  ::common::UUID* unsafe_arena_release_agent_id();
  // .common.AgentVersion agent_version = 3;
  bool has_agent_version() const;
  private:
  bool _internal_has_agent_version() const;

  public:
  void clear_agent_version() ;
  const ::common::AgentVersion& agent_version() const;
  PROTOBUF_NODISCARD ::common::AgentVersion* release_agent_version();
  ::common::AgentVersion* mutable_agent_version();
  void set_allocated_agent_version(::common::AgentVersion* agent_version);
  private:
  const ::common::AgentVersion& _internal_agent_version() const;
  ::common::AgentVersion* _internal_mutable_agent_version();
  public:
  void unsafe_arena_set_allocated_agent_version(
      ::common::AgentVersion* agent_version);
  ::common::AgentVersion* unsafe_arena_release_agent_version();
  // .agent.DTO.SystemInformation system_info = 4;
  bool has_system_info() const;
  private:
  bool _internal_has_system_info() const;

  public:
  void clear_system_info() ;
  const ::agent::DTO::SystemInformation& system_info() const;
  PROTOBUF_NODISCARD ::agent::DTO::SystemInformation* release_system_info();
  ::agent::DTO::SystemInformation* mutable_system_info();
  void set_allocated_system_info(::agent::DTO::SystemInformation* system_info);
  private:
  const ::agent::DTO::SystemInformation& _internal_system_info() const;
  ::agent::DTO::SystemInformation* _internal_mutable_system_info();
  public:
  void unsafe_arena_set_allocated_system_info(
      ::agent::DTO::SystemInformation* system_info);
  ::agent::DTO::SystemInformation* unsafe_arena_release_system_info();
  // .agent.DTO.AuthenticationData auth_data = 5;
  bool has_auth_data() const;
  private:
  bool _internal_has_auth_data() const;

  public:
  void clear_auth_data() ;
  const ::agent::DTO::AuthenticationData& auth_data() const;
  PROTOBUF_NODISCARD ::agent::DTO::AuthenticationData* release_auth_data();
  ::agent::DTO::AuthenticationData* mutable_auth_data();
  void set_allocated_auth_data(::agent::DTO::AuthenticationData* auth_data);
  private:
  const ::agent::DTO::AuthenticationData& _internal_auth_data() const;
  ::agent::DTO::AuthenticationData* _internal_mutable_auth_data();
  public:
  void unsafe_arena_set_allocated_auth_data(
      ::agent::DTO::AuthenticationData* auth_data);
  ::agent::DTO::AuthenticationData* unsafe_arena_release_auth_data();
  // @@protoc_insertion_point(class_scope:agent.DTO.RegisterInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::common::UUID* register_request_id_;
    ::common::UUID* agent_id_;
    ::common::AgentVersion* agent_version_;
    ::agent::DTO::SystemInformation* system_info_;
    ::agent::DTO::AuthenticationData* auth_data_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_register_2eproto;
};// -------------------------------------------------------------------

class RegisterResult final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:agent.DTO.RegisterResult) */ {
 public:
  inline RegisterResult() : RegisterResult(nullptr) {}
  ~RegisterResult() override;
  explicit PROTOBUF_CONSTEXPR RegisterResult(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RegisterResult(const RegisterResult& from);
  RegisterResult(RegisterResult&& from) noexcept
    : RegisterResult() {
    *this = ::std::move(from);
  }

  inline RegisterResult& operator=(const RegisterResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegisterResult& operator=(RegisterResult&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RegisterResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const RegisterResult* internal_default_instance() {
    return reinterpret_cast<const RegisterResult*>(
               &_RegisterResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(RegisterResult& a, RegisterResult& b) {
    a.Swap(&b);
  }
  inline void Swap(RegisterResult* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RegisterResult* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RegisterResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RegisterResult>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RegisterResult& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RegisterResult& from) {
    RegisterResult::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegisterResult* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "agent.DTO.RegisterResult";
  }
  protected:
  explicit RegisterResult(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // .common.Error error = 2;
  bool has_error() const;
  private:
  bool _internal_has_error() const;

  public:
  void clear_error() ;
  const ::common::Error& error() const;
  PROTOBUF_NODISCARD ::common::Error* release_error();
  ::common::Error* mutable_error();
  void set_allocated_error(::common::Error* error);
  private:
  const ::common::Error& _internal_error() const;
  ::common::Error* _internal_mutable_error();
  public:
  void unsafe_arena_set_allocated_error(
      ::common::Error* error);
  ::common::Error* unsafe_arena_release_error();
  // .common.Status status = 1;
  void clear_status() ;
  ::common::Status status() const;
  void set_status(::common::Status value);

  private:
  ::common::Status _internal_status() const;
  void _internal_set_status(::common::Status value);

  public:
  // @@protoc_insertion_point(class_scope:agent.DTO.RegisterResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::common::Error* error_;
    int status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_register_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// AuthenticationData

// .agent.DTO.AuthenticationType auth_type = 1;
inline void AuthenticationData::clear_auth_type() {
  _impl_.auth_type_ = 0;
}
inline ::agent::DTO::AuthenticationType AuthenticationData::auth_type() const {
  // @@protoc_insertion_point(field_get:agent.DTO.AuthenticationData.auth_type)
  return _internal_auth_type();
}
inline void AuthenticationData::set_auth_type(::agent::DTO::AuthenticationType value) {
   _internal_set_auth_type(value);
  // @@protoc_insertion_point(field_set:agent.DTO.AuthenticationData.auth_type)
}
inline ::agent::DTO::AuthenticationType AuthenticationData::_internal_auth_type() const {
  return static_cast<::agent::DTO::AuthenticationType>(_impl_.auth_type_);
}
inline void AuthenticationData::_internal_set_auth_type(::agent::DTO::AuthenticationType value) {
  ;
  _impl_.auth_type_ = value;
}

// .common.UUID tenant_id = 2;
inline bool AuthenticationData::_internal_has_tenant_id() const {
  return this != internal_default_instance() && _impl_.tenant_id_ != nullptr;
}
inline bool AuthenticationData::has_tenant_id() const {
  return _internal_has_tenant_id();
}
inline const ::common::UUID& AuthenticationData::_internal_tenant_id() const {
  const ::common::UUID* p = _impl_.tenant_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::UUID&>(
      ::common::_UUID_default_instance_);
}
inline const ::common::UUID& AuthenticationData::tenant_id() const {
  // @@protoc_insertion_point(field_get:agent.DTO.AuthenticationData.tenant_id)
  return _internal_tenant_id();
}
inline void AuthenticationData::unsafe_arena_set_allocated_tenant_id(
    ::common::UUID* tenant_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tenant_id_);
  }
  _impl_.tenant_id_ = tenant_id;
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:agent.DTO.AuthenticationData.tenant_id)
}
inline ::common::UUID* AuthenticationData::release_tenant_id() {
  
  ::common::UUID* temp = _impl_.tenant_id_;
  _impl_.tenant_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::common::UUID* AuthenticationData::unsafe_arena_release_tenant_id() {
  // @@protoc_insertion_point(field_release:agent.DTO.AuthenticationData.tenant_id)
  
  ::common::UUID* temp = _impl_.tenant_id_;
  _impl_.tenant_id_ = nullptr;
  return temp;
}
inline ::common::UUID* AuthenticationData::_internal_mutable_tenant_id() {
  
  if (_impl_.tenant_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::UUID>(GetArenaForAllocation());
    _impl_.tenant_id_ = p;
  }
  return _impl_.tenant_id_;
}
inline ::common::UUID* AuthenticationData::mutable_tenant_id() {
  ::common::UUID* _msg = _internal_mutable_tenant_id();
  // @@protoc_insertion_point(field_mutable:agent.DTO.AuthenticationData.tenant_id)
  return _msg;
}
inline void AuthenticationData::set_allocated_tenant_id(::common::UUID* tenant_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tenant_id_);
  }
  if (tenant_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tenant_id));
    if (message_arena != submessage_arena) {
      tenant_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tenant_id, submessage_arena);
    }

  } else {

  }
  _impl_.tenant_id_ = tenant_id;
  // @@protoc_insertion_point(field_set_allocated:agent.DTO.AuthenticationData.tenant_id)
}

// -------------------------------------------------------------------

// SystemInformation

// string kubernetes_version = 1;
inline void SystemInformation::clear_kubernetes_version() {
  _impl_.kubernetes_version_.ClearToEmpty();
}
inline const std::string& SystemInformation::kubernetes_version() const {
  // @@protoc_insertion_point(field_get:agent.DTO.SystemInformation.kubernetes_version)
  return _internal_kubernetes_version();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SystemInformation::set_kubernetes_version(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.kubernetes_version_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:agent.DTO.SystemInformation.kubernetes_version)
}
inline std::string* SystemInformation::mutable_kubernetes_version() {
  std::string* _s = _internal_mutable_kubernetes_version();
  // @@protoc_insertion_point(field_mutable:agent.DTO.SystemInformation.kubernetes_version)
  return _s;
}
inline const std::string& SystemInformation::_internal_kubernetes_version() const {
  return _impl_.kubernetes_version_.Get();
}
inline void SystemInformation::_internal_set_kubernetes_version(const std::string& value) {
  ;


  _impl_.kubernetes_version_.Set(value, GetArenaForAllocation());
}
inline std::string* SystemInformation::_internal_mutable_kubernetes_version() {
  ;
  return _impl_.kubernetes_version_.Mutable( GetArenaForAllocation());
}
inline std::string* SystemInformation::release_kubernetes_version() {
  // @@protoc_insertion_point(field_release:agent.DTO.SystemInformation.kubernetes_version)
  return _impl_.kubernetes_version_.Release();
}
inline void SystemInformation::set_allocated_kubernetes_version(std::string* value) {
  _impl_.kubernetes_version_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.kubernetes_version_.IsDefault()) {
          _impl_.kubernetes_version_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:agent.DTO.SystemInformation.kubernetes_version)
}

// -------------------------------------------------------------------

// RegisterInfo

// .common.UUID register_request_id = 1;
inline bool RegisterInfo::_internal_has_register_request_id() const {
  return this != internal_default_instance() && _impl_.register_request_id_ != nullptr;
}
inline bool RegisterInfo::has_register_request_id() const {
  return _internal_has_register_request_id();
}
inline const ::common::UUID& RegisterInfo::_internal_register_request_id() const {
  const ::common::UUID* p = _impl_.register_request_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::UUID&>(
      ::common::_UUID_default_instance_);
}
inline const ::common::UUID& RegisterInfo::register_request_id() const {
  // @@protoc_insertion_point(field_get:agent.DTO.RegisterInfo.register_request_id)
  return _internal_register_request_id();
}
inline void RegisterInfo::unsafe_arena_set_allocated_register_request_id(
    ::common::UUID* register_request_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.register_request_id_);
  }
  _impl_.register_request_id_ = register_request_id;
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:agent.DTO.RegisterInfo.register_request_id)
}
inline ::common::UUID* RegisterInfo::release_register_request_id() {
  
  ::common::UUID* temp = _impl_.register_request_id_;
  _impl_.register_request_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::common::UUID* RegisterInfo::unsafe_arena_release_register_request_id() {
  // @@protoc_insertion_point(field_release:agent.DTO.RegisterInfo.register_request_id)
  
  ::common::UUID* temp = _impl_.register_request_id_;
  _impl_.register_request_id_ = nullptr;
  return temp;
}
inline ::common::UUID* RegisterInfo::_internal_mutable_register_request_id() {
  
  if (_impl_.register_request_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::UUID>(GetArenaForAllocation());
    _impl_.register_request_id_ = p;
  }
  return _impl_.register_request_id_;
}
inline ::common::UUID* RegisterInfo::mutable_register_request_id() {
  ::common::UUID* _msg = _internal_mutable_register_request_id();
  // @@protoc_insertion_point(field_mutable:agent.DTO.RegisterInfo.register_request_id)
  return _msg;
}
inline void RegisterInfo::set_allocated_register_request_id(::common::UUID* register_request_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.register_request_id_);
  }
  if (register_request_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(register_request_id));
    if (message_arena != submessage_arena) {
      register_request_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, register_request_id, submessage_arena);
    }

  } else {

  }
  _impl_.register_request_id_ = register_request_id;
  // @@protoc_insertion_point(field_set_allocated:agent.DTO.RegisterInfo.register_request_id)
}

// .common.UUID agent_id = 2;
inline bool RegisterInfo::_internal_has_agent_id() const {
  return this != internal_default_instance() && _impl_.agent_id_ != nullptr;
}
inline bool RegisterInfo::has_agent_id() const {
  return _internal_has_agent_id();
}
inline const ::common::UUID& RegisterInfo::_internal_agent_id() const {
  const ::common::UUID* p = _impl_.agent_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::UUID&>(
      ::common::_UUID_default_instance_);
}
inline const ::common::UUID& RegisterInfo::agent_id() const {
  // @@protoc_insertion_point(field_get:agent.DTO.RegisterInfo.agent_id)
  return _internal_agent_id();
}
inline void RegisterInfo::unsafe_arena_set_allocated_agent_id(
    ::common::UUID* agent_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.agent_id_);
  }
  _impl_.agent_id_ = agent_id;
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:agent.DTO.RegisterInfo.agent_id)
}
inline ::common::UUID* RegisterInfo::release_agent_id() {
  
  ::common::UUID* temp = _impl_.agent_id_;
  _impl_.agent_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::common::UUID* RegisterInfo::unsafe_arena_release_agent_id() {
  // @@protoc_insertion_point(field_release:agent.DTO.RegisterInfo.agent_id)
  
  ::common::UUID* temp = _impl_.agent_id_;
  _impl_.agent_id_ = nullptr;
  return temp;
}
inline ::common::UUID* RegisterInfo::_internal_mutable_agent_id() {
  
  if (_impl_.agent_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::UUID>(GetArenaForAllocation());
    _impl_.agent_id_ = p;
  }
  return _impl_.agent_id_;
}
inline ::common::UUID* RegisterInfo::mutable_agent_id() {
  ::common::UUID* _msg = _internal_mutable_agent_id();
  // @@protoc_insertion_point(field_mutable:agent.DTO.RegisterInfo.agent_id)
  return _msg;
}
inline void RegisterInfo::set_allocated_agent_id(::common::UUID* agent_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.agent_id_);
  }
  if (agent_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(agent_id));
    if (message_arena != submessage_arena) {
      agent_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, agent_id, submessage_arena);
    }

  } else {

  }
  _impl_.agent_id_ = agent_id;
  // @@protoc_insertion_point(field_set_allocated:agent.DTO.RegisterInfo.agent_id)
}

// .common.AgentVersion agent_version = 3;
inline bool RegisterInfo::_internal_has_agent_version() const {
  return this != internal_default_instance() && _impl_.agent_version_ != nullptr;
}
inline bool RegisterInfo::has_agent_version() const {
  return _internal_has_agent_version();
}
inline const ::common::AgentVersion& RegisterInfo::_internal_agent_version() const {
  const ::common::AgentVersion* p = _impl_.agent_version_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::AgentVersion&>(
      ::common::_AgentVersion_default_instance_);
}
inline const ::common::AgentVersion& RegisterInfo::agent_version() const {
  // @@protoc_insertion_point(field_get:agent.DTO.RegisterInfo.agent_version)
  return _internal_agent_version();
}
inline void RegisterInfo::unsafe_arena_set_allocated_agent_version(
    ::common::AgentVersion* agent_version) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.agent_version_);
  }
  _impl_.agent_version_ = agent_version;
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:agent.DTO.RegisterInfo.agent_version)
}
inline ::common::AgentVersion* RegisterInfo::release_agent_version() {
  
  ::common::AgentVersion* temp = _impl_.agent_version_;
  _impl_.agent_version_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::common::AgentVersion* RegisterInfo::unsafe_arena_release_agent_version() {
  // @@protoc_insertion_point(field_release:agent.DTO.RegisterInfo.agent_version)
  
  ::common::AgentVersion* temp = _impl_.agent_version_;
  _impl_.agent_version_ = nullptr;
  return temp;
}
inline ::common::AgentVersion* RegisterInfo::_internal_mutable_agent_version() {
  
  if (_impl_.agent_version_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::AgentVersion>(GetArenaForAllocation());
    _impl_.agent_version_ = p;
  }
  return _impl_.agent_version_;
}
inline ::common::AgentVersion* RegisterInfo::mutable_agent_version() {
  ::common::AgentVersion* _msg = _internal_mutable_agent_version();
  // @@protoc_insertion_point(field_mutable:agent.DTO.RegisterInfo.agent_version)
  return _msg;
}
inline void RegisterInfo::set_allocated_agent_version(::common::AgentVersion* agent_version) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.agent_version_);
  }
  if (agent_version) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(agent_version));
    if (message_arena != submessage_arena) {
      agent_version = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, agent_version, submessage_arena);
    }

  } else {

  }
  _impl_.agent_version_ = agent_version;
  // @@protoc_insertion_point(field_set_allocated:agent.DTO.RegisterInfo.agent_version)
}

// .agent.DTO.SystemInformation system_info = 4;
inline bool RegisterInfo::_internal_has_system_info() const {
  return this != internal_default_instance() && _impl_.system_info_ != nullptr;
}
inline bool RegisterInfo::has_system_info() const {
  return _internal_has_system_info();
}
inline void RegisterInfo::clear_system_info() {
  if (GetArenaForAllocation() == nullptr && _impl_.system_info_ != nullptr) {
    delete _impl_.system_info_;
  }
  _impl_.system_info_ = nullptr;
}
inline const ::agent::DTO::SystemInformation& RegisterInfo::_internal_system_info() const {
  const ::agent::DTO::SystemInformation* p = _impl_.system_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::agent::DTO::SystemInformation&>(
      ::agent::DTO::_SystemInformation_default_instance_);
}
inline const ::agent::DTO::SystemInformation& RegisterInfo::system_info() const {
  // @@protoc_insertion_point(field_get:agent.DTO.RegisterInfo.system_info)
  return _internal_system_info();
}
inline void RegisterInfo::unsafe_arena_set_allocated_system_info(
    ::agent::DTO::SystemInformation* system_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.system_info_);
  }
  _impl_.system_info_ = system_info;
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:agent.DTO.RegisterInfo.system_info)
}
inline ::agent::DTO::SystemInformation* RegisterInfo::release_system_info() {
  
  ::agent::DTO::SystemInformation* temp = _impl_.system_info_;
  _impl_.system_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::agent::DTO::SystemInformation* RegisterInfo::unsafe_arena_release_system_info() {
  // @@protoc_insertion_point(field_release:agent.DTO.RegisterInfo.system_info)
  
  ::agent::DTO::SystemInformation* temp = _impl_.system_info_;
  _impl_.system_info_ = nullptr;
  return temp;
}
inline ::agent::DTO::SystemInformation* RegisterInfo::_internal_mutable_system_info() {
  
  if (_impl_.system_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::agent::DTO::SystemInformation>(GetArenaForAllocation());
    _impl_.system_info_ = p;
  }
  return _impl_.system_info_;
}
inline ::agent::DTO::SystemInformation* RegisterInfo::mutable_system_info() {
  ::agent::DTO::SystemInformation* _msg = _internal_mutable_system_info();
  // @@protoc_insertion_point(field_mutable:agent.DTO.RegisterInfo.system_info)
  return _msg;
}
inline void RegisterInfo::set_allocated_system_info(::agent::DTO::SystemInformation* system_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.system_info_;
  }
  if (system_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(system_info);
    if (message_arena != submessage_arena) {
      system_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, system_info, submessage_arena);
    }

  } else {

  }
  _impl_.system_info_ = system_info;
  // @@protoc_insertion_point(field_set_allocated:agent.DTO.RegisterInfo.system_info)
}

// .agent.DTO.AuthenticationData auth_data = 5;
inline bool RegisterInfo::_internal_has_auth_data() const {
  return this != internal_default_instance() && _impl_.auth_data_ != nullptr;
}
inline bool RegisterInfo::has_auth_data() const {
  return _internal_has_auth_data();
}
inline void RegisterInfo::clear_auth_data() {
  if (GetArenaForAllocation() == nullptr && _impl_.auth_data_ != nullptr) {
    delete _impl_.auth_data_;
  }
  _impl_.auth_data_ = nullptr;
}
inline const ::agent::DTO::AuthenticationData& RegisterInfo::_internal_auth_data() const {
  const ::agent::DTO::AuthenticationData* p = _impl_.auth_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::agent::DTO::AuthenticationData&>(
      ::agent::DTO::_AuthenticationData_default_instance_);
}
inline const ::agent::DTO::AuthenticationData& RegisterInfo::auth_data() const {
  // @@protoc_insertion_point(field_get:agent.DTO.RegisterInfo.auth_data)
  return _internal_auth_data();
}
inline void RegisterInfo::unsafe_arena_set_allocated_auth_data(
    ::agent::DTO::AuthenticationData* auth_data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.auth_data_);
  }
  _impl_.auth_data_ = auth_data;
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:agent.DTO.RegisterInfo.auth_data)
}
inline ::agent::DTO::AuthenticationData* RegisterInfo::release_auth_data() {
  
  ::agent::DTO::AuthenticationData* temp = _impl_.auth_data_;
  _impl_.auth_data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::agent::DTO::AuthenticationData* RegisterInfo::unsafe_arena_release_auth_data() {
  // @@protoc_insertion_point(field_release:agent.DTO.RegisterInfo.auth_data)
  
  ::agent::DTO::AuthenticationData* temp = _impl_.auth_data_;
  _impl_.auth_data_ = nullptr;
  return temp;
}
inline ::agent::DTO::AuthenticationData* RegisterInfo::_internal_mutable_auth_data() {
  
  if (_impl_.auth_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::agent::DTO::AuthenticationData>(GetArenaForAllocation());
    _impl_.auth_data_ = p;
  }
  return _impl_.auth_data_;
}
inline ::agent::DTO::AuthenticationData* RegisterInfo::mutable_auth_data() {
  ::agent::DTO::AuthenticationData* _msg = _internal_mutable_auth_data();
  // @@protoc_insertion_point(field_mutable:agent.DTO.RegisterInfo.auth_data)
  return _msg;
}
inline void RegisterInfo::set_allocated_auth_data(::agent::DTO::AuthenticationData* auth_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.auth_data_;
  }
  if (auth_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(auth_data);
    if (message_arena != submessage_arena) {
      auth_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, auth_data, submessage_arena);
    }

  } else {

  }
  _impl_.auth_data_ = auth_data;
  // @@protoc_insertion_point(field_set_allocated:agent.DTO.RegisterInfo.auth_data)
}

// -------------------------------------------------------------------

// RegisterResult

// .common.Status status = 1;
inline void RegisterResult::clear_status() {
  _impl_.status_ = 0;
}
inline ::common::Status RegisterResult::status() const {
  // @@protoc_insertion_point(field_get:agent.DTO.RegisterResult.status)
  return _internal_status();
}
inline void RegisterResult::set_status(::common::Status value) {
   _internal_set_status(value);
  // @@protoc_insertion_point(field_set:agent.DTO.RegisterResult.status)
}
inline ::common::Status RegisterResult::_internal_status() const {
  return static_cast<::common::Status>(_impl_.status_);
}
inline void RegisterResult::_internal_set_status(::common::Status value) {
  ;
  _impl_.status_ = value;
}

// .common.Error error = 2;
inline bool RegisterResult::_internal_has_error() const {
  return this != internal_default_instance() && _impl_.error_ != nullptr;
}
inline bool RegisterResult::has_error() const {
  return _internal_has_error();
}
inline const ::common::Error& RegisterResult::_internal_error() const {
  const ::common::Error* p = _impl_.error_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::Error&>(
      ::common::_Error_default_instance_);
}
inline const ::common::Error& RegisterResult::error() const {
  // @@protoc_insertion_point(field_get:agent.DTO.RegisterResult.error)
  return _internal_error();
}
inline void RegisterResult::unsafe_arena_set_allocated_error(
    ::common::Error* error) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.error_);
  }
  _impl_.error_ = error;
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:agent.DTO.RegisterResult.error)
}
inline ::common::Error* RegisterResult::release_error() {
  
  ::common::Error* temp = _impl_.error_;
  _impl_.error_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::common::Error* RegisterResult::unsafe_arena_release_error() {
  // @@protoc_insertion_point(field_release:agent.DTO.RegisterResult.error)
  
  ::common::Error* temp = _impl_.error_;
  _impl_.error_ = nullptr;
  return temp;
}
inline ::common::Error* RegisterResult::_internal_mutable_error() {
  
  if (_impl_.error_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::Error>(GetArenaForAllocation());
    _impl_.error_ = p;
  }
  return _impl_.error_;
}
inline ::common::Error* RegisterResult::mutable_error() {
  ::common::Error* _msg = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:agent.DTO.RegisterResult.error)
  return _msg;
}
inline void RegisterResult::set_allocated_error(::common::Error* error) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.error_);
  }
  if (error) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(error));
    if (message_arena != submessage_arena) {
      error = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }

  } else {

  }
  _impl_.error_ = error;
  // @@protoc_insertion_point(field_set_allocated:agent.DTO.RegisterResult.error)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace DTO
}  // namespace agent


PROTOBUF_NAMESPACE_OPEN

template <>
struct is_proto_enum<::agent::DTO::AuthenticationType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::agent::DTO::AuthenticationType>() {
  return ::agent::DTO::AuthenticationType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_register_2eproto_2epb_2eh
